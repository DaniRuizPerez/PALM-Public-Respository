output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1 + output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)]
# output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1
if (length(grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",1))
}
if (length(grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",2))
}
}
sum(colSums(output))
#########################################################################################################################
#########################################################################################################################
###### PROJECT:        DBNs
###### NAME:           CreateStyle.R
###### AUTHOR:         Daniel Ruiz-Perez, PhD Student
###### AFFILIATION:    Florida International University
######
###### DESCRIPTION:    This file creates the style.xml file needed to visualize it in Cytoscape. It takes as input a network
######                , a file with the mean abundance and a base style file to update.
#########################################################################################################################
#########################################################################################################################
library(scales)
library(stringr)
options("scipen"=100, "digits"=4)
folder = "C:/Users/danir/Google Drive/FIU/RESEARCH/DBNs/Heterogeneous/SupportingCode/" #"Demo" #"finalFiguresBootscore" #"finalFiguresBootscore"
setwd(folder)
#nameOfNetwork = "DemoFigure.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = "human_ibd_microbiota_metabolites+genes_dbn_sample_alignment_sr14d_dbnIntraBootMaxP3.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = paste(folder,nameOfNetwork,sep="/")
#READ NETWORK
network = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =network, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
newNetwork = network[grep(pattern = paste(".*target=\".*_ti\\+1\">","",sep=""), x = network, ignore.case = T)]
newNetwork = gsub("<edge id=\"e\\d*\" source=\"", "", newNetwork)
# newNetwork = gsub("_ti", "", newNetwork)
# newNetwork = gsub("\\+1", "", newNetwork)
newNetwork = gsub("\\[", "[", newNetwork)
newNetwork = gsub("\\]", "]", newNetwork)
newNetwork = gsub("\">", "", newNetwork)
newNetwork = gsub("m__", "", newNetwork)
newNetwork = gsub("s__", "", newNetwork)
newNetwork = gsub("g__", "", newNetwork)
newNetwork = gsub("\\+", "\\\\+", newNetwork)
newNetwork = gsub("\\(", "\\\\(", newNetwork)
newNetwork = gsub("\\)", "\\\\)", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
pairs = c()
for (line in newNetwork){
edge =  trimws(strsplit(line,"\" target=\"")[[1]], which ="both")
pairs = rbind(pairs,edge)
}
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = gsub("\\\\", "", uniqueNames)
output = matrix(0, nrow = length(uniqueNames), ncol = length(uniqueNames))
colnames(output) = uniqueNames
rownames(output) = uniqueNames
for (i in 1:nrow(pairs)){
# output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1 + output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)]
output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1
if (length(grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",1))
}
if (length(grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",2))
}
}
sum(colSums(output))
write.csv(output,paste(nameOfNetwork,".csv",sep=""))
#########################################################################################################################
#########################################################################################################################
###### PROJECT:        DBNs
###### NAME:           CreateStyle.R
###### AUTHOR:         Daniel Ruiz-Perez, PhD Student
###### AFFILIATION:    Florida International University
######
###### DESCRIPTION:    This file converts a .graphml file into a csv file.
#########################################################################################################################
#########################################################################################################################
library(scales)
library(stringr)
options("scipen"=100, "digits"=4)
folder = "C:/Users/danir/Google Drive/FIU/RESEARCH/DBNs/Heterogeneous/SupportingCode/" #"Demo" #"finalFiguresBootscore" #"finalFiguresBootscore"
setwd(folder)
#nameOfNetwork = "DemoFigure.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = "human_ibd_microbiota_metabolites+genes_dbn_sample_alignment_sr14d_dbnIntraBootMaxP3.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = paste(folder,nameOfNetwork,sep="/")
#READ NETWORK
network = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =network, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
newNetwork = network[grep(pattern = paste(".*target=\".*_ti\\+1\">","",sep=""), x = network, ignore.case = T)]
newNetwork = gsub("<edge id=\"e\\d*\" source=\"", "", newNetwork)
newNetwork = gsub("_ti", "", newNetwork)
newNetwork = gsub("\\+1", "", newNetwork)
newNetwork = gsub("\\[", "[", newNetwork)
newNetwork = gsub("\\]", "]", newNetwork)
newNetwork = gsub("\">", "", newNetwork)
newNetwork = gsub("m__", "", newNetwork)
newNetwork = gsub("s__", "", newNetwork)
newNetwork = gsub("g__", "", newNetwork)
newNetwork = gsub("\\+", "\\\\+", newNetwork)
newNetwork = gsub("\\(", "\\\\(", newNetwork)
newNetwork = gsub("\\)", "\\\\)", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
pairs = c()
for (line in newNetwork){
edge =  trimws(strsplit(line,"\" target=\"")[[1]], which ="both")
pairs = rbind(pairs,edge)
}
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = gsub("\\\\", "", uniqueNames)
output = matrix(0, nrow = length(uniqueNames), ncol = length(uniqueNames))
colnames(output) = uniqueNames
rownames(output) = uniqueNames
for (i in 1:nrow(pairs)){
# output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1 + output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)]
output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1
if (length(grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",1))
}
if (length(grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",2))
}
}
# There are less 1s than it should be intuitively because we have merged ti and ti+1
sum(colSums(output))
write.csv(output,paste(nameOfNetwork,".csv",sep=""))
#########################################################################################################################
#########################################################################################################################
###### PROJECT:        DBNs
###### NAME:           CreateStyle.R
###### AUTHOR:         Daniel Ruiz-Perez, PhD Student
###### AFFILIATION:    Florida International University
######
###### DESCRIPTION:    This file converts a .graphml file into a csv file.
#########################################################################################################################
#########################################################################################################################
library(scales)
library(stringr)
options("scipen"=100, "digits"=4)
folder = "C:/Users/danir/Google Drive/FIU/RESEARCH/DBNs/Heterogeneous/SupportingCode/" #"Demo" #"finalFiguresBootscore" #"finalFiguresBootscore"
setwd(folder)
#nameOfNetwork = "DemoFigure.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = "human_ibd_microbiota_metabolites+genes_dbn_sample_alignment_sr14d_dbnIntraBootMaxP3.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = paste(folder,nameOfNetwork,sep="/")
#READ NETWORK
network = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =network, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
newNetwork = network[grep(pattern = paste(".*target=\".*_ti\\+1\">","",sep=""), x = network, ignore.case = T)]
newNetwork = gsub("<edge id=\"e\\d*\" source=\"", "", newNetwork)
newNetwork = gsub("_ti", "", newNetwork)
newNetwork = gsub("\\+1", "", newNetwork)
newNetwork = gsub("\\[", "[", newNetwork)
newNetwork = gsub("\\]", "]", newNetwork)
newNetwork = gsub("\">", "", newNetwork)
newNetwork = gsub("m__", "", newNetwork)
newNetwork = gsub("s__", "", newNetwork)
newNetwork = gsub("g__", "", newNetwork)
newNetwork = gsub("\\+", "\\\\+", newNetwork)
newNetwork = gsub("\\(", "\\\\(", newNetwork)
newNetwork = gsub("\\)", "\\\\)", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
pairs = c()
for (line in newNetwork){
edge =  trimws(strsplit(line,"\" target=\"")[[1]], which ="both")
pairs = rbind(pairs,edge)
}
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = gsub("\\\\", "", uniqueNames)
output = matrix(0, nrow = length(uniqueNames), ncol = length(uniqueNames))
colnames(output) = uniqueNames
rownames(output) = uniqueNames
for (i in 1:nrow(pairs)){
# output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1 + output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)]
output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1
if (length(grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",1))
}
if (length(grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",2))
}
}
# There are less 1s than it should be intuitively because we have merged ti and ti+1
sum(colSums(output))
write.csv(output,paste(nameOfNetwork,".csv",sep=""))
#########################################################################################################################
#########################################################################################################################
###### PROJECT:        DBNs
###### NAME:           CreateStyle.R
###### AUTHOR:         Daniel Ruiz-Perez, PhD Student
###### AFFILIATION:    Florida International University
######
###### DESCRIPTION:    This file converts a .graphml file into a csv file.
#########################################################################################################################
#########################################################################################################################
library(scales)
library(stringr)
options("scipen"=100, "digits"=4)
folder = "C:/Users/danir/Google Drive/FIU/RESEARCH/DBNs/Heterogeneous/SupportingCode/" #"Demo" #"finalFiguresBootscore" #"finalFiguresBootscore"
setwd(folder)
#nameOfNetwork = "DemoFigure.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = "human_ibd_microbiota_metabolites+genes_dbn_sample_alignment_sr14d_dbnIntraBootMaxP3.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = paste(folder,nameOfNetwork,sep="/")
#READ NETWORK
network = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =network, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
newNetwork = network[grep(pattern = paste(".*target=\".*_ti\\+1\">","",sep=""), x = network, ignore.case = T)]
newNetwork = gsub("<edge id=\"e\\d*\" source=\"", "", newNetwork)
# newNetwork = gsub("_ti", "", newNetwork)
# newNetwork = gsub("\\+1", "", newNetwork)
newNetwork = gsub("\\[", "[", newNetwork)
newNetwork = gsub("\\]", "]", newNetwork)
newNetwork = gsub("\">", "", newNetwork)
newNetwork = gsub("m__", "", newNetwork)
newNetwork = gsub("s__", "", newNetwork)
newNetwork = gsub("g__", "", newNetwork)
newNetwork = gsub("\\+", "\\\\+", newNetwork)
newNetwork = gsub("\\(", "\\\\(", newNetwork)
newNetwork = gsub("\\)", "\\\\)", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
pairs = c()
for (line in newNetwork){
edge =  trimws(strsplit(line,"\" target=\"")[[1]], which ="both")
pairs = rbind(pairs,edge)
}
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = gsub("\\\\", "", uniqueNames)
output = matrix(0, nrow = length(uniqueNames), ncol = length(uniqueNames))
colnames(output) = uniqueNames
rownames(output) = uniqueNames
for (i in 1:nrow(pairs)){
# output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1 + output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)]
output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1
if (length(grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",1))
}
if (length(grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",2))
}
}
# There are less 1s than it should be intuitively because we have merged ti and ti+1
sum(colSums(output))
write.csv(output,paste(nameOfNetwork,".csv",sep=""))
#########################################################################################################################
#########################################################################################################################
###### PROJECT:        DBNs
###### NAME:           CreateStyle.R
###### AUTHOR:         Daniel Ruiz-Perez, PhD Student
###### AFFILIATION:    Florida International University
######
###### DESCRIPTION:    This file converts a .graphml file into a csv file.
#########################################################################################################################
#########################################################################################################################
library(scales)
library(stringr)
options("scipen"=100, "digits"=4)
folder = "C:/Users/danir/Google Drive/FIU/RESEARCH/DBNs/Heterogeneous/SupportingCode/" #"Demo" #"finalFiguresBootscore" #"finalFiguresBootscore"
setwd(folder)
#nameOfNetwork = "DemoFigure.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = "human_ibd_microbiota_metabolites+genes_dbn_sample_alignment_sr14d_dbnIntraBootMaxP3.graphml"#list.files(pattern =".*\\.graphml")
nameOfNetwork = paste(folder,nameOfNetwork,sep="/")
#READ NETWORK
network = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =network, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
newNetwork = network[grep(pattern = paste(".*target=\".*_ti\\+1\">","",sep=""), x = network, ignore.case = T)]
newNetwork = gsub("<edge id=\"e\\d*\" source=\"", "", newNetwork)
newNetwork = gsub("_ti", "", newNetwork)
newNetwork = gsub("\\+1", "", newNetwork)
newNetwork = gsub("\\[", "[", newNetwork)
newNetwork = gsub("\\]", "]", newNetwork)
newNetwork = gsub("\">", "", newNetwork)
newNetwork = gsub("m__", "", newNetwork)
newNetwork = gsub("s__", "", newNetwork)
newNetwork = gsub("g__", "", newNetwork)
newNetwork = gsub("\\+", "\\\\+", newNetwork)
newNetwork = gsub("\\(", "\\\\(", newNetwork)
newNetwork = gsub("\\)", "\\\\)", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
newNetwork = gsub("\\[", "\\\\]", newNetwork)
pairs = c()
for (line in newNetwork){
edge =  trimws(strsplit(line,"\" target=\"")[[1]], which ="both")
pairs = rbind(pairs,edge)
}
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = unique(c(pairs[,1],pairs[,2]))
uniqueNames = gsub("\\\\", "", uniqueNames)
output = matrix(0, nrow = length(uniqueNames), ncol = length(uniqueNames))
colnames(output) = uniqueNames
rownames(output) = uniqueNames
for (i in 1:nrow(pairs)){
# output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1 + output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)]
output[grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames),grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames)] = 1
if (length(grep(paste("^",pairs[i,1],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",1))
}
if (length(grep(paste("^",pairs[i,2],"$",sep=""),uniqueNames))!= 1){
print(paste(i,"col",2))
}
}
# There are less 1s than it should be intuitively because we have merged ti and ti+1
sum(colSums(output))
write.csv(output,paste(nameOfNetwork,".csv",sep=""))
?write.csv
write.csv(output,paste(nameOfNetwork,".csv",sep=""),sep="\t")
write.csv2(output,paste(nameOfNetwork,".csv",sep=""),sep="\t")
write.csv2(output,paste(nameOfNetwork,".csv",sep=""),sep="\t",quote=F)
write.table(output,paste(nameOfNetwork,".csv",sep=""),sep="\t",quote=F)
#########################################################################################################################
#########################################################################################################################
###### PROJECT:        DBNs
###### NAME:           ValidateTG.R
###### AUTHOR:         Daniel Ruiz-Perez, PhD Student
###### AFFILIATION:    Florida International University
###### DESCRIPTION:    Converts the graphml network into an adjacency matrix
######                 Also outputs an adjacency matrix with just the validated interactions
######                 Calculates the hypergeometric distribution values and other stats
######                 Does a binomial test
#########################################################################################################################
#########################################################################################################################
rm(list=ls())
library(scales)
library(stringr)
library("stats")
library(poisbinom)
library(plotrix)
options("scipen"=100, "digits"=4)
folder = "C:/Users/danir/Google Drive/RESEARCH/DBNs/Heterogeneous/Supplementary_SourceCode_Datasets/ExtraExperiments/NewLogRatio/" #"Demo" #"finalFiguresBootscore" #"finalFiguresBootscore"
setwd(folder)
files = list.files(path = folder, pattern = ".graphml")
for (f in files){
nameOfNetwork = paste(folder,f,sep="/")
network = tryCatch({
readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
}, warning = function(e) {
""
}, error = function(e) {
""
})
if (network == "")
next
# network = str_replace(network,"0.0.","0.")
#####################################################################
############# LOAD INFORMATION FROM  GRAPHML NETWORK #############
#####################################################################
#READ NETWORK
network =  gsub("\\(", "", gsub("\\)", "",gsub("\\[", "", gsub("\\]","",gsub("t0", "ti", gsub("tn", "ti+1", tolower(unlist(strsplit(x =network, "\r?\n")))))))))
network = gsub("\n<data key=\"key_bootscore\">[0-9]*\\.[0-9]*</data>\n","",network)
newNetwork = network[grep(pattern = paste(".*target=\".*_ti\\+1\">","",sep=""), x = network, ignore.case = T)]
newNetwork = gsub("s__", "", gsub("\\(", "", gsub("\\)", "", gsub("\\[", "", gsub("\\]", "", gsub("_ti", "", gsub("\\+1", "",  gsub("\">", "", gsub("g__", "", gsub("<edge id=\"e\\d*\" source=\"", "", newNetwork))))))))))
#get the weight of the edges
edgeWeight = network[grep("<data key=\\\"key_weight.*",network)]
edgeWeight = as.numeric(gsub("\"", "", gsub("<data key=\\\"key_weight\\\">", "", gsub("</data>", "", edgeWeight))))
#get the bootscore of the edges
edgeBootscore = network[grep("<data key=\\\"key_bootscore.*",network)]
edgeBootscore = as.numeric(gsub("\"", "", gsub("<data key=\\\"key_bootscore\\\">", "", gsub("</data>", "", edgeBootscore))))
#Extract the information from the network
pairs = c()
for (i in 1:length(newNetwork)){
edge =  c(trimws(strsplit(newNetwork[i],"\" target=\"")[[1]], which ="both"),as.numeric(edgeWeight[i]),as.numeric(edgeBootscore[i]))
pairs = rbind(pairs,edge)
}
colnames(pairs) = c("source","target", "weigh", "bootscore")
pairs = as.data.frame(pairs)
pairs = pairs[order(abs(as.numeric(as.character(pairs[,3]))*as.numeric(as.character(pairs[,4]))),decreasing=T ),]
write.table(pairs, paste(strsplit(f,".graphml")[[1]],"_list.txt"), sep=",", append=F, row.names = F,quote=F)
}
print("done")
#########################################################################################################################
#########################################################################################################################
###### PROJECT:        DBNs
###### NAME:           NormalizeEdges.R
###### AUTHOR:         Daniel Ruiz-Perez, PhD Student
###### AFFILIATION:    Florida International University
######
###### DESCRIPTION:    This file normalizes the weight of the files in a folder by updating them
#########################################################################################################################
#########################################################################################################################
library(scales)
library(stringr)
library(igraph)
options("scipen"=100, "digits"=4)
folder = "C:/Users/danir/Google Drive/RESEARCH/DBNs/Heterogeneous/Supplementary_SourceCode_Datasets/ExtraExperiments/NewLogRatio/" #"Demo" #"finalFiguresBootscore" #"finalFiguresBootscore"
setwd(folder)
files = list.files(path = folder, pattern = ".graphml")
for (f in files){
nameOfNetwork = paste(folder,f,sep="/")
abundances = unlist(read.csv('meanAbundanceiHMPAlignment.txt',sep="\t"))
networkO = readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
network= unlist(strsplit(x =networkO, "\r\n"))
network= unlist(strsplit(x =network, "\n"))
################## EDGE WIDTH
weights = str_extract(network[grep("key=\"key_weight",network)], "\\-*\\d+\\.+\\d+")
weights = weights[!is.na(weights)]
########### WE NORMALIZE THE WEIGHTS BASED ON w_i \average{x_i} / \sum_j  abs(w_j) \average{x_j}
library(igraph)
edgeList = igraph::get.edgelist(igraph::read.graph(nameOfNetwork, format = "graphml"))
edgeAttr = igraph::get.edge.attribute(igraph::read.graph(nameOfNetwork, format = "graphml"))
nodeAttr = igraph::get.vertex.attribute(igraph::read.graph(nameOfNetwork, format = "graphml"))
#This function returns the abundance of a node based on the index of the incoming node
abundanceOfTaxa <- function(nameOfIncomingNode,abundances){
# we look for the abundance of that parent node
abundance = abundances[which(names(abundances) %in% substr(nameOfIncomingNode,1,nchar(nameOfIncomingNode)-3))]
if (length(abundance)==0){
#the node doesn't have abundance, it is clinical. We make it to be an average of the other abundances
abundance = mean(abundances)
}
return (abundance)
}
normalizedWeights =c()
#Iterate over all posible children. to normalize incoming edges to each of them
for (i in 1:length(nodeAttr[[1]])){
indexOfIncomingEdges = which(edgeList[,2]==i)
indexOfOutgoingEdges = edgeList[indexOfIncomingEdges,1]
#We need to calculate the sum of the multiplication of each weight times the mean abundance for all incoming edges of this children
sum = 0
for (j in 1:length(indexOfIncomingEdges)){
nameOfIncomingNode = nodeAttr$id[indexOfOutgoingEdges[j]]
abundance = abundanceOfTaxa(nameOfIncomingNode,abundances)
sum = sum + abs(edgeAttr$weight[indexOfIncomingEdges[j]]*abundance)
}
#Iterate over all incoming edges for this children
for (j in 1:length(indexOfIncomingEdges)){
nameOfIncomingNode = nodeAttr$id[indexOfOutgoingEdges[j]]
abundance = abundanceOfTaxa(nameOfIncomingNode,abundances)
normalizedWeights = as.vector(c(normalizedWeights,edgeAttr$weight[indexOfIncomingEdges[j]]*abundance/sum))
}
}
#we update the weights in the file
for(i in 1:length(weights)){
networkO = gsub(weights[i], normalizedWeights[i], networkO)
}
#save it and take care of the null character that appears
writeChar(networkO,nameOfNetwork,nchars = nchar(networkO))
r = readBin(nameOfNetwork, raw(), file.info(nameOfNetwork)$size)
r[r==as.raw(0)] = as.raw(0x20) ## replace with 0x20 = <space>
writeBin(r, nameOfNetwork)
# if (f %in% "infant_gut_microbiota_dbn_sample_alignment_filtered_sr3d_dbnIntraBoot.graphml")
#   break
}
#########################################################################################################################
#########################################################################################################################
###### PROJECT:        DBNs
###### NAME:           ValidateTG.R
###### AUTHOR:         Daniel Ruiz-Perez, PhD Student
###### AFFILIATION:    Florida International University
###### DESCRIPTION:    Converts the graphml network into an adjacency matrix
######                 Also outputs an adjacency matrix with just the validated interactions
######                 Calculates the hypergeometric distribution values and other stats
######                 Does a binomial test
#########################################################################################################################
#########################################################################################################################
rm(list=ls())
library(scales)
library(stringr)
library("stats")
library(poisbinom)
library(plotrix)
options("scipen"=100, "digits"=4)
folder = "C:/Users/danir/Google Drive/RESEARCH/DBNs/Heterogeneous/Supplementary_SourceCode_Datasets/ExtraExperiments/NewLogRatio/" #"Demo" #"finalFiguresBootscore" #"finalFiguresBootscore"
setwd(folder)
files = list.files(path = folder, pattern = ".graphml")
for (f in files){
nameOfNetwork = paste(folder,f,sep="/")
network = tryCatch({
readChar(nameOfNetwork, file.info(nameOfNetwork)$size)
}, warning = function(e) {
""
}, error = function(e) {
""
})
if (network == "")
next
# network = str_replace(network,"0.0.","0.")
#####################################################################
############# LOAD INFORMATION FROM  GRAPHML NETWORK #############
#####################################################################
#READ NETWORK
network =  gsub("\\(", "", gsub("\\)", "",gsub("\\[", "", gsub("\\]","",gsub("t0", "ti", gsub("tn", "ti+1", tolower(unlist(strsplit(x =network, "\r?\n")))))))))
network = gsub("\n<data key=\"key_bootscore\">[0-9]*\\.[0-9]*</data>\n","",network)
newNetwork = network[grep(pattern = paste(".*target=\".*_ti\\+1\">","",sep=""), x = network, ignore.case = T)]
newNetwork = gsub("s__", "", gsub("\\(", "", gsub("\\)", "", gsub("\\[", "", gsub("\\]", "", gsub("_ti", "", gsub("\\+1", "",  gsub("\">", "", gsub("g__", "", gsub("<edge id=\"e\\d*\" source=\"", "", newNetwork))))))))))
#get the weight of the edges
edgeWeight = network[grep("<data key=\\\"key_weight.*",network)]
edgeWeight = as.numeric(gsub("\"", "", gsub("<data key=\\\"key_weight\\\">", "", gsub("</data>", "", edgeWeight))))
#get the bootscore of the edges
edgeBootscore = network[grep("<data key=\\\"key_bootscore.*",network)]
edgeBootscore = as.numeric(gsub("\"", "", gsub("<data key=\\\"key_bootscore\\\">", "", gsub("</data>", "", edgeBootscore))))
#Extract the information from the network
pairs = c()
for (i in 1:length(newNetwork)){
edge =  c(trimws(strsplit(newNetwork[i],"\" target=\"")[[1]], which ="both"),as.numeric(edgeWeight[i]),as.numeric(edgeBootscore[i]))
pairs = rbind(pairs,edge)
}
colnames(pairs) = c("source","target", "weigh", "bootscore")
pairs = as.data.frame(pairs)
pairs = pairs[order(abs(as.numeric(as.character(pairs[,3]))*as.numeric(as.character(pairs[,4]))),decreasing=T ),]
write.table(pairs, paste(strsplit(f,".graphml")[[1]],"_list.txt"), sep=",", append=F, row.names = F,quote=F)
}
print("done")
